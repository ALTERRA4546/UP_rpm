{\rtf1\ansi\ansicpg1251\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset204 Calibri;}{\f1\fnil Calibri;}{\f2\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\b\i\f0\fs22\lang1049\'cd\'e0\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'e5: \'e1\'e0\'e7\'ee\'e2\'fb\'e5 \'ef\'ee\'ed\'ff\'f2\'e8\'ff, \'ef\'f0\'e5\'e8\'ec\'f3\'f9\'e5\'f1\'f2\'e2\'e0 \'e8 \'ed\'e5\'e4\'ee\'f1\'f2\'e0\'f2\'ea\'e8, \'ee\'e1\'f9\'e0\'ff \'f4\'ee\'f0\'ec\'e0.\par
\'d1\'f2\'f0\'ee\'ea\'e8 \'e2 C#: \'f0\'e0\'e1\'ee\'f2\'e0 \'f1\'ee \'f1\'f2\'f0\'ee\'ea\'e0\'ec\'e8, \'ec\'e5\'f2\'ee\'e4\'fb \'ea\'eb\'e0\'f1\'f1\'e0 String\par
\'d1\'ee\'e7\'e4\'e0\'e9\'f2\'e5 \'ef\'f0\'ff\'ec\'ee\'f3\'e3\'ee\'eb\'fc\'ed\'e8\'ea \'e8 \'e4\'e2\'e0 \'f1\'eb\'e0\'e9\'e4\'e5\'f0\'e0. \'ce\'e4\'e8\'ed \'f1\'eb\'e0\'e9\'e4\'e5\'f0 \'e4\'ee\'eb\'e6\'e5\'ed \'ea\'ee\'ed\'f2\'f0\'ee\'eb\'e8\'f0\'ee\'e2\'e0\'f2\'fc \'f8\'e8\'f0\'e8\'ed\'f3 \'ef\'f0\'ff\'ec\'ee\'f3\'e3\'ee\'eb\'fc\'ed\'e8\'ea\'e0, \'e4\'f0\'f3\'e3\'ee\'e9 - \'e2\'fb\'f1\'ee\'f2\'f3. \'c8\'e7\'ec\'e5\'ed\'e5\'ed\'e8\'e5 \'f0\'e0\'e7\'ec\'e5\'f0\'ee\'e2 \'e4\'ee\'eb\'e6\'ed\'ee \'ef\'f0\'ee\'e8\'f1\'f5\'ee\'e4\'e8\'f2\'fc \'ef\'eb\'e0\'e2\'ed\'ee \'f1 \'e0\'ed\'e8\'ec\'e0\'f6\'e8\'e5\'e9\par
\par
\b0\i0\'cd\'e0\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'e5 \f1\emdash  \f0\'fd\'f2\'ee \'ee\'e4\'e8\'ed \'e8\'e7 \'ea\'eb\'fe\'f7\'e5\'e2\'fb\'f5 \'ef\'f0\'e8\'ed\'f6\'e8\'ef\'ee\'e2 \'ee\'e1\'fa\'e5\'ea\'f2\'ed\'ee-\'ee\'f0\'e8\'e5\'ed\'f2\'e8\'f0\'ee\'e2\'e0\'ed\'ed\'ee\'e3\'ee \'ef\'f0\'ee\'e3\'f0\'e0\'ec\'ec\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'ff (\'ce\'ce\'cf), \'ea\'ee\'f2\'ee\'f0\'fb\'e9 \'ef\'ee\'e7\'e2\'ee\'eb\'ff\'e5\'f2 \'f1\'ee\'e7\'e4\'e0\'e2\'e0\'f2\'fc \'ed\'ee\'e2\'fb\'e5 \'ea\'eb\'e0\'f1\'f1\'fb \'ed\'e0 \'ee\'f1\'ed\'ee\'e2\'e5 \'f3\'e6\'e5 \'f1\'f3\'f9\'e5\'f1\'f2\'e2\'f3\'fe\'f9\'e8\'f5. \'cd\'ee\'e2\'fb\'e9 \'ea\'eb\'e0\'f1\'f1, \'ed\'e0\'e7\'fb\'e2\'e0\'e5\'ec\'fb\'e9 \'ef\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'ec \'ea\'eb\'e0\'f1\'f1\'ee\'ec (\'e8\'eb\'e8 \'ef\'ee\'e4\'ea\'eb\'e0\'f1\'f1\'ee\'ec, \'e4\'ee\'f7\'e5\'f0\'ed\'e8\'ec \'ea\'eb\'e0\'f1\'f1\'ee\'ec), \'ef\'ee\'eb\'f3\'f7\'e0\'e5\'f2 (\'ed\'e0\'f1\'eb\'e5\'e4\'f3\'e5\'f2) \'f1\'e2\'ee\'e9\'f1\'f2\'e2\'e0 \'e8 \'ec\'e5\'f2\'ee\'e4\'fb \'e1\'e0\'e7\'ee\'e2\'ee\'e3\'ee \'ea\'eb\'e0\'f1\'f1\'e0 (\'e8\'eb\'e8 \'f1\'f3\'ef\'e5\'f0\'ea\'eb\'e0\'f1\'f1\'e0, \'f0\'ee\'e4\'e8\'f2\'e5\'eb\'fc\'f1\'ea\'ee\'e3\'ee \'ea\'eb\'e0\'f1\'f1\'e0).\par
\b\'ce\'f1\'ed\'ee\'e2\'ed\'fb\'e5 \'ef\'ee\'ed\'ff\'f2\'e8\'ff\b0\par
\'c1\'e0\'e7\'ee\'e2\'fb\'e9 \'ea\'eb\'e0\'f1\'f1 (Base Class/Superclass/Parent Class): \'ca\'eb\'e0\'f1\'f1, \'ee\'f2 \'ea\'ee\'f2\'ee\'f0\'ee\'e3\'ee \'ef\'f0\'ee\'e8\'f1\'f5\'ee\'e4\'e8\'f2 \'ed\'e0\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'e5. \'ce\'ed \'ee\'ef\'f0\'e5\'e4\'e5\'eb\'ff\'e5\'f2 \'ee\'e1\'f9\'f3\'fe \'f1\'f2\'f0\'f3\'ea\'f2\'f3\'f0\'f3 \'e8 \'ef\'ee\'e2\'e5\'e4\'e5\'ed\'e8\'e5 \'e4\'eb\'ff \'f0\'ff\'e4\'e0 \'ef\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'f5 \'ea\'eb\'e0\'f1\'f1\'ee\'e2.\par
\'cf\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'e9 \'ea\'eb\'e0\'f1\'f1 (Derived Class/Subclass/Child Class): \'ca\'eb\'e0\'f1\'f1, \'ea\'ee\'f2\'ee\'f0\'fb\'e9 \'ed\'e0\'f1\'eb\'e5\'e4\'f3\'e5\'f2 \'ee\'f2 \'e1\'e0\'e7\'ee\'e2\'ee\'e3\'ee \'ea\'eb\'e0\'f1\'f1\'e0. \'ce\'ed \'f0\'e0\'f1\'f8\'e8\'f0\'ff\'e5\'f2 \'e8\'eb\'e8 \'e8\'e7\'ec\'e5\'ed\'ff\'e5\'f2 \'ef\'ee\'e2\'e5\'e4\'e5\'ed\'e8\'e5 \'e1\'e0\'e7\'ee\'e2\'ee\'e3\'ee \'ea\'eb\'e0\'f1\'f1\'e0.\par
\'cd\'e0\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'e5 \'f1\'e2\'ee\'e9\'f1\'f2\'e2: \'cf\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'e9 \'ea\'eb\'e0\'f1\'f1 \'ef\'ee\'eb\'f3\'f7\'e0\'e5\'f2 \'e4\'ee\'f1\'f2\'f3\'ef \'ea\'ee \'e2\'f1\'e5\'ec \'e4\'ee\'f1\'f2\'f3\'ef\'ed\'fb\'ec (\'ed\'e5 private) \'ef\'ee\'eb\'ff\'ec \'e8 \'f1\'e2\'ee\'e9\'f1\'f2\'e2\'e0\'ec \'e1\'e0\'e7\'ee\'e2\'ee\'e3\'ee \'ea\'eb\'e0\'f1\'f1\'e0.\par
\'cd\'e0\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'e5 \'ec\'e5\'f2\'ee\'e4\'ee\'e2: \'cf\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'e9 \'ea\'eb\'e0\'f1\'f1 \'ef\'ee\'eb\'f3\'f7\'e0\'e5\'f2 \'e4\'ee\'f1\'f2\'f3\'ef \'ea\'ee \'e2\'f1\'e5\'ec \'e4\'ee\'f1\'f2\'f3\'ef\'ed\'fb\'ec (\'ed\'e5 private) \'ec\'e5\'f2\'ee\'e4\'e0\'ec \'e1\'e0\'e7\'ee\'e2\'ee\'e3\'ee \'ea\'eb\'e0\'f1\'f1\'e0.\par
\'d0\'e0\'f1\'f8\'e8\'f0\'e5\'ed\'e8\'e5: \'cf\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'e9 \'ea\'eb\'e0\'f1\'f1 \'ec\'ee\'e6\'e5\'f2 \'e4\'ee\'e1\'e0\'e2\'eb\'ff\'f2\'fc \'f1\'ee\'e1\'f1\'f2\'e2\'e5\'ed\'ed\'fb\'e5 \'ef\'ee\'eb\'ff, \'f1\'e2\'ee\'e9\'f1\'f2\'e2\'e0 \'e8 \'ec\'e5\'f2\'ee\'e4\'fb, \'ea\'ee\'f2\'ee\'f0\'fb\'e5 \'ed\'e5 \'f1\'f3\'f9\'e5\'f1\'f2\'e2\'f3\'fe\'f2 \'e2 \'e1\'e0\'e7\'ee\'e2\'ee\'ec \'ea\'eb\'e0\'f1\'f1\'e5.\par
\'cf\'e5\'f0\'e5\'ee\'ef\'f0\'e5\'e4\'e5\'eb\'e5\'ed\'e8\'e5 (Overriding): \'cf\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'e9 \'ea\'eb\'e0\'f1\'f1 \'ec\'ee\'e6\'e5\'f2 \'ef\'e5\'f0\'e5\'ee\'ef\'f0\'e5\'e4\'e5\'eb\'ff\'f2\'fc (\'e8\'e7\'ec\'e5\'ed\'ff\'f2\'fc \'f0\'e5\'e0\'eb\'e8\'e7\'e0\'f6\'e8\'fe) \'ec\'e5\'f2\'ee\'e4\'fb \'e1\'e0\'e7\'ee\'e2\'ee\'e3\'ee \'ea\'eb\'e0\'f1\'f1\'e0, \'e5\'f1\'eb\'e8 \'ee\'ed\'e8 \'ef\'ee\'ec\'e5\'f7\'e5\'ed\'fb \'ea\'e0\'ea virtual (\'e8\'eb\'e8 abstract \'e2 \'f1\'eb\'f3\'f7\'e0\'e5 \'e0\'e1\'f1\'f2\'f0\'e0\'ea\'f2\'ed\'fb\'f5 \'ea\'eb\'e0\'f1\'f1\'ee\'e2).\par
\'cc\'ed\'ee\'e6\'e5\'f1\'f2\'e2\'e5\'ed\'ed\'ee\'e5 \'ed\'e0\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'e5: C# \'ed\'e5 \'ef\'ee\'e4\'e4\'e5\'f0\'e6\'e8\'e2\'e0\'e5\'f2 \'ec\'ed\'ee\'e6\'e5\'f1\'f2\'e2\'e5\'ed\'ed\'ee\'e5 \'ed\'e0\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'e5 \'ea\'eb\'e0\'f1\'f1\'ee\'e2 (\'f2.\'e5. \'ed\'e0\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'e5 \'ee\'f2 \'ed\'e5\'f1\'ea\'ee\'eb\'fc\'ea\'e8\'f5 \'e1\'e0\'e7\'ee\'e2\'fb\'f5 \'ea\'eb\'e0\'f1\'f1\'ee\'e2), \'ed\'ee \'ef\'ee\'e4\'e4\'e5\'f0\'e6\'e8\'e2\'e0\'e5\'f2 \'ec\'ed\'ee\'e6\'e5\'f1\'f2\'e2\'e5\'ed\'ed\'ee\'e5 \'ed\'e0\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'e5 \'e8\'ed\'f2\'e5\'f0\'f4\'e5\'e9\'f1\'ee\'e2.\par
\b\'cf\'f0\'e5\'e8\'ec\'f3\'f9\'e5\'f1\'f2\'e2\'e0 \'cd\'e0\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'ff\b0\par
\'cf\'ee\'e2\'f2\'ee\'f0\'ed\'ee\'e5 \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'ed\'e8\'e5 \'ea\'ee\'e4\'e0: \'cd\'e0\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'e5 \'ef\'ee\'e7\'e2\'ee\'eb\'ff\'e5\'f2 \'e8\'e7\'e1\'e5\'e6\'e0\'f2\'fc \'e4\'f3\'e1\'eb\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'ff \'ea\'ee\'e4\'e0, \'f2\'e0\'ea \'ea\'e0\'ea \'ef\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'e5 \'ea\'eb\'e0\'f1\'f1\'fb \'ec\'ee\'e3\'f3\'f2 \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'f2\'fc \'f3\'e6\'e5 \'ed\'e0\'ef\'e8\'f1\'e0\'ed\'ed\'fb\'e9 \'ea\'ee\'e4 \'e1\'e0\'e7\'ee\'e2\'ee\'e3\'ee \'ea\'eb\'e0\'f1\'f1\'e0.\par
\'d0\'e0\'f1\'f8\'e8\'f0\'ff\'e5\'ec\'ee\'f1\'f2\'fc: \'cd\'e0\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'e5 \'ef\'ee\'e7\'e2\'ee\'eb\'ff\'e5\'f2 \'f0\'e0\'f1\'f8\'e8\'f0\'ff\'f2\'fc \'f4\'f3\'ed\'ea\'f6\'e8\'ee\'ed\'e0\'eb\'fc\'ed\'ee\'f1\'f2\'fc \'f1\'f3\'f9\'e5\'f1\'f2\'e2\'f3\'fe\'f9\'e8\'f5 \'ea\'eb\'e0\'f1\'f1\'ee\'e2, \'f1\'ee\'e7\'e4\'e0\'e2\'e0\'ff \'ed\'ee\'e2\'fb\'e5 \'ef\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'e5 \'ea\'eb\'e0\'f1\'f1\'fb \'f1 \'e4\'ee\'ef\'ee\'eb\'ed\'e8\'f2\'e5\'eb\'fc\'ed\'fb\'ec \'ef\'ee\'e2\'e5\'e4\'e5\'ed\'e8\'e5\'ec.\par
\'ce\'f0\'e3\'e0\'ed\'e8\'e7\'e0\'f6\'e8\'ff \'e8 \'f1\'f2\'f0\'f3\'ea\'f2\'f3\'f0\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'e5 \'ea\'ee\'e4\'e0: \'cd\'e0\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'e5 \'ef\'ee\'ec\'ee\'e3\'e0\'e5\'f2 \'f1\'f2\'f0\'f3\'ea\'f2\'f3\'f0\'e8\'f0\'ee\'e2\'e0\'f2\'fc \'ea\'ee\'e4, \'f1\'ee\'e7\'e4\'e0\'e2\'e0\'ff \'e8\'e5\'f0\'e0\'f0\'f5\'e8\'fe \'ea\'eb\'e0\'f1\'f1\'ee\'e2, \'ee\'f2\'f0\'e0\'e6\'e0\'fe\'f9\'f3\'fe \'e2\'e7\'e0\'e8\'ec\'ee\'f1\'e2\'ff\'e7\'e8 \'ec\'e5\'e6\'e4\'f3 \'ee\'e1\'fa\'e5\'ea\'f2\'e0\'ec\'e8.\par
\'cf\'ee\'eb\'e8\'ec\'ee\'f0\'f4\'e8\'e7\'ec: \'cd\'e0\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'e5 \'ff\'e2\'eb\'ff\'e5\'f2\'f1\'ff \'ee\'f1\'ed\'ee\'e2\'ee\'e9 \'e4\'eb\'ff \'ef\'ee\'eb\'e8\'ec\'ee\'f0\'f4\'e8\'e7\'ec\'e0, \'ea\'ee\'f2\'ee\'f0\'fb\'e9 \'ef\'ee\'e7\'e2\'ee\'eb\'ff\'e5\'f2 \'ee\'e1\'f0\'e0\'e1\'e0\'f2\'fb\'e2\'e0\'f2\'fc \'ee\'e1\'fa\'e5\'ea\'f2\'fb \'f0\'e0\'e7\'eb\'e8\'f7\'ed\'fb\'f5 \'ea\'eb\'e0\'f1\'f1\'ee\'e2 \'e5\'e4\'e8\'ed\'ee\'ee\'e1\'f0\'e0\'e7\'ed\'ee, \'e5\'f1\'eb\'e8 \'ee\'ed\'e8 \'e8\'ec\'e5\'fe\'f2 \'ee\'e1\'f9\'e8\'e9 \'e1\'e0\'e7\'ee\'e2\'fb\'e9 \'ea\'eb\'e0\'f1\'f1.\par
\'d3\'ec\'e5\'ed\'fc\'f8\'e5\'ed\'e8\'e5 \'e4\'f3\'e1\'eb\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'ff \'ea\'ee\'e4\'e0: \'cd\'e0\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'e5 \'f1\'ef\'ee\'f1\'ee\'e1\'f1\'f2\'e2\'f3\'e5\'f2 \'f3\'ec\'e5\'ed\'fc\'f8\'e5\'ed\'e8\'fe \'e4\'f3\'e1\'eb\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'ff \'ea\'ee\'e4\'e0, \'f7\'f2\'ee \'f3\'ef\'f0\'ee\'f9\'e0\'e5\'f2 \'ef\'ee\'e4\'e4\'e5\'f0\'e6\'ea\'f3 \'e8 \'f1\'ee\'ef\'f0\'ee\'e2\'ee\'e6\'e4\'e5\'ed\'e8\'e5 \'ef\'f0\'ee\'e3\'f0\'e0\'ec\'ec\'ed\'ee\'e3\'ee \'ef\'f0\'ee\'e4\'f3\'ea\'f2\'e0.\par
\b\'cd\'e5\'e4\'ee\'f1\'f2\'e0\'f2\'ea\'e8 \'cd\'e0\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'ff\b0\par
\'c6\'e5\'f1\'f2\'ea\'e0\'ff \'f1\'e2\'ff\'e7\'fc (Tight Coupling): \'cd\'e0\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'e5 \'f1\'ee\'e7\'e4\'e0\'e5\'f2 \'f2\'e5\'f1\'ed\'f3\'fe \'f1\'e2\'ff\'e7\'fc \'ec\'e5\'e6\'e4\'f3 \'e1\'e0\'e7\'ee\'e2\'fb\'ec \'e8 \'ef\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'ec \'ea\'eb\'e0\'f1\'f1\'e0\'ec\'e8, \'f7\'f2\'ee \'ec\'ee\'e6\'e5\'f2 \'ef\'f0\'e8\'e2\'e5\'f1\'f2\'e8 \'ea \'ef\'f0\'ee\'e1\'eb\'e5\'ec\'e0\'ec \'ef\'f0\'e8 \'e8\'e7\'ec\'e5\'ed\'e5\'ed\'e8\'e8 \'e1\'e0\'e7\'ee\'e2\'ee\'e3\'ee \'ea\'eb\'e0\'f1\'f1\'e0. \'c8\'e7\'ec\'e5\'ed\'e5\'ed\'e8\'ff \'e2 \'e1\'e0\'e7\'ee\'e2\'ee\'ec \'ea\'eb\'e0\'f1\'f1\'e5 \'ec\'ee\'e3\'f3\'f2 \'ef\'ee\'f2\'f0\'e5\'e1\'ee\'e2\'e0\'f2\'fc \'e8\'e7\'ec\'e5\'ed\'e5\'ed\'e8\'ff \'e2\'ee \'e2\'f1\'e5\'f5 \'ef\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'f5 \'ea\'eb\'e0\'f1\'f1\'e0\'f5.\par
\'cf\'f0\'ee\'e1\'eb\'e5\'ec\'e0 \'f5\'f0\'f3\'ef\'ea\'ee\'f1\'f2\'e8 \'e1\'e0\'e7\'ee\'e2\'ee\'e3\'ee \'ea\'eb\'e0\'f1\'f1\'e0: \'cd\'e5\'ee\'f1\'f2\'ee\'f0\'ee\'e6\'ed\'ee\'e5 \'e8\'e7\'ec\'e5\'ed\'e5\'ed\'e8\'e5 \'e1\'e0\'e7\'ee\'e2\'ee\'e3\'ee \'ea\'eb\'e0\'f1\'f1\'e0 \'ec\'ee\'e6\'e5\'f2 \ldblquote\'f1\'eb\'ee\'ec\'e0\'f2\'fc\rdblquote  \'ef\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'e5 \'ea\'eb\'e0\'f1\'f1\'fb.\par
\'d1\'eb\'ee\'e6\'ed\'ee\'f1\'f2\'fc \'e8\'e5\'f0\'e0\'f0\'f5\'e8\'e8: \'d1\'eb\'e8\'f8\'ea\'ee\'ec \'e3\'eb\'f3\'e1\'ee\'ea\'e0\'ff \'e8\'e5\'f0\'e0\'f0\'f5\'e8\'ff \'ed\'e0\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'ff \'ec\'ee\'e6\'e5\'f2 \'f3\'f1\'eb\'ee\'e6\'ed\'e8\'f2\'fc \'ef\'ee\'ed\'e8\'ec\'e0\'ed\'e8\'e5 \'ea\'ee\'e4\'e0 \'e8 \'e7\'e0\'f2\'f0\'f3\'e4\'ed\'e8\'f2\'fc \'e5\'e3\'ee \'f1\'ee\'ef\'f0\'ee\'e2\'ee\'e6\'e4\'e5\'ed\'e8\'e5.\par
\'cd\'e5\'e3\'e8\'e1\'ea\'ee\'f1\'f2\'fc: \'cd\'e0\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'e5 \'e8\'ed\'ee\'e3\'e4\'e0 \'ec\'ee\'e6\'e5\'f2 \'e1\'fb\'f2\'fc \'f1\'eb\'e8\'f8\'ea\'ee\'ec \'e6\'e5\'f1\'f2\'ea\'e8\'ec \'f1\'ef\'ee\'f1\'ee\'e1\'ee\'ec \'ef\'ee\'e2\'f2\'ee\'f0\'ed\'ee\'e3\'ee \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'ed\'e8\'ff \'ea\'ee\'e4\'e0. \'ca\'ee\'ec\'ef\'ee\'e7\'e8\'f6\'e8\'ff (\'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'ed\'e8\'e5 \'ee\'e1\'fa\'e5\'ea\'f2\'ee\'e2 \'e4\'f0\'f3\'e3\'e8\'f5 \'ea\'eb\'e0\'f1\'f1\'ee\'e2 \'e2 \'ea\'e0\'f7\'e5\'f1\'f2\'e2\'e5 \'ef\'ee\'eb\'e5\'e9) \'ec\'ee\'e6\'e5\'f2 \'e1\'fb\'f2\'fc \'e1\'ee\'eb\'e5\'e5 \'e3\'e8\'e1\'ea\'e8\'ec \'f0\'e5\'f8\'e5\'ed\'e8\'e5\'ec \'e2 \'ed\'e5\'ea\'ee\'f2\'ee\'f0\'fb\'f5 \'f1\'eb\'f3\'f7\'e0\'ff\'f5.\par
\b\'ce\'e1\'f9\'e0\'ff \'f4\'ee\'f0\'ec\'e0 \'ed\'e0\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'ff \'e2 C#\b0\par
// \'c1\'e0\'e7\'ee\'e2\'fb\'e9 \'ea\'eb\'e0\'f1\'f1\par
public class \'c1\'e0\'e7\'ee\'e2\'fb\'e9\'ca\'eb\'e0\'f1\'f1\par
\{\par
    // \'cf\'ee\'eb\'ff, \'f1\'e2\'ee\'e9\'f1\'f2\'e2\'e0, \'ec\'e5\'f2\'ee\'e4\'fb\par
    public int \'c1\'e0\'e7\'ee\'e2\'ee\'e5\'cf\'ee\'eb\'e5 \{ get; set; \}\par
    public virtual void \'c1\'e0\'e7\'ee\'e2\'fb\'e9\'cc\'e5\'f2\'ee\'e4()\par
    \{\par
        Console.WriteLine("\'c1\'e0\'e7\'ee\'e2\'fb\'e9\'cc\'e5\'f2\'ee\'e4");\par
    \}\par
\}\par
// \'cf\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'e9 \'ea\'eb\'e0\'f1\'f1, \'ed\'e0\'f1\'eb\'e5\'e4\'f3\'fe\'f9\'e8\'e9 \'ee\'f2 \'c1\'e0\'e7\'ee\'e2\'ee\'e3\'ee\'ca\'eb\'e0\'f1\'f1\'e0\par
public class \'cf\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'e9\'ca\'eb\'e0\'f1\'f1 : \'c1\'e0\'e7\'ee\'e2\'fb\'e9\'ca\'eb\'e0\'f1\'f1\par
\{\par
    // \'d1\'e2\'ee\'e8 \'ef\'ee\'eb\'ff, \'f1\'e2\'ee\'e9\'f1\'f2\'e2\'e0, \'ec\'e5\'f2\'ee\'e4\'fb\par
    public int \'cf\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'ee\'e5\'cf\'ee\'eb\'e5 \{ get; set; \}\par
    // \'cf\'e5\'f0\'e5\'ee\'ef\'f0\'e5\'e4\'e5\'eb\'e5\'ed\'e8\'e5 \'ec\'e5\'f2\'ee\'e4\'e0 \'e8\'e7 \'e1\'e0\'e7\'ee\'e2\'ee\'e3\'ee \'ea\'eb\'e0\'f1\'f1\'e0\par
    public override void \'c1\'e0\'e7\'ee\'e2\'fb\'e9\'cc\'e5\'f2\'ee\'e4()\par
    \{\par
        Console.WriteLine("\'cf\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'e9 \'ec\'e5\'f2\'ee\'e4");\par
    \}\par
    public void \'cf\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'e9\'cc\'e5\'f2\'ee\'e4()\par
    \{\par
        Console.WriteLine("\'cf\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'e9\'cc\'e5\'f2\'ee\'e4");\par
    \}\par
\}\par
public class Example\par
\{\par
    public static void Main(string[] args)\par
    \{\par
        \'c1\'e0\'e7\'ee\'e2\'fb\'e9\'ca\'eb\'e0\'f1\'f1 \'e1\'e0\'e7\'ee\'e2\'fb\'e9\'ce\'e1\'fa\'e5\'ea\'f2 = new \'c1\'e0\'e7\'ee\'e2\'fb\'e9\'ca\'eb\'e0\'f1\'f1();\par
        \'e1\'e0\'e7\'ee\'e2\'fb\'e9\'ce\'e1\'fa\'e5\'ea\'f2.\'c1\'e0\'e7\'ee\'e2\'fb\'e9\'cc\'e5\'f2\'ee\'e4(); // \'c2\'fb\'e2\'e5\'e4\'e5\'f2 "\'c1\'e0\'e7\'ee\'e2\'fb\'e9\'cc\'e5\'f2\'ee\'e4"\par
\par
        \'cf\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'e9\'ca\'eb\'e0\'f1\'f1 \'ef\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'e9\'ce\'e1\'fa\'e5\'ea\'f2 = new \'cf\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'e9\'ca\'eb\'e0\'f1\'f1();\par
        \'ef\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'e9\'ce\'e1\'fa\'e5\'ea\'f2.\'c1\'e0\'e7\'ee\'e2\'fb\'e9\'cc\'e5\'f2\'ee\'e4(); // \'c2\'fb\'e2\'e5\'e4\'e5\'f2 "\'cf\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'e9 \'ec\'e5\'f2\'ee\'e4"\par
        \'ef\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'e9\'ce\'e1\'fa\'e5\'ea\'f2.\'cf\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'e9\'cc\'e5\'f2\'ee\'e4(); // \'c2\'fb\'e2\'e5\'e4\'e5\'f2 "\'cf\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'e9\'cc\'e5\'f2\'ee\'e4"\par
        Console.WriteLine(\'ef\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'e9\'ce\'e1\'fa\'e5\'ea\'f2.\'c1\'e0\'e7\'ee\'e2\'ee\'e5\'cf\'ee\'eb\'e5);\par
    \}\par
\}\par
\par
\'c2 C# \'f1\'f2\'f0\'ee\'ea\'e0 (string) \'ef\'f0\'e5\'e4\'f1\'f2\'e0\'e2\'eb\'ff\'e5\'f2 \'f1\'ee\'e1\'ee\'e9 \'ef\'ee\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'f2\'e5\'eb\'fc\'ed\'ee\'f1\'f2\'fc \'f1\'e8\'ec\'e2\'ee\'eb\'ee\'e2 \'de\'ed\'e8\'ea\'ee\'e4\'e0. \'d1\'f2\'f0\'ee\'ea\'e8 \'ff\'e2\'eb\'ff\'fe\'f2\'f1\'ff \'ed\'e5\'e8\'e7\'ec\'e5\'ed\'ff\'e5\'ec\'fb\'ec\'e8 (immutable), \'f7\'f2\'ee \'ee\'e7\'ed\'e0\'f7\'e0\'e5\'f2, \'f7\'f2\'ee \'ef\'ee\'f1\'eb\'e5 \'f1\'ee\'e7\'e4\'e0\'ed\'e8\'ff \'f1\'f2\'f0\'ee\'ea\'e8 \'e5\'e5 \'ed\'e5\'eb\'fc\'e7\'ff \'e8\'e7\'ec\'e5\'ed\'e8\'f2\'fc. \'cb\'fe\'e1\'e0\'ff \'ee\'ef\'e5\'f0\'e0\'f6\'e8\'ff, \'ea\'ee\'f2\'ee\'f0\'e0\'ff \'ea\'e0\'e6\'e5\'f2\'f1\'ff \'e8\'e7\'ec\'e5\'ed\'ff\'fe\'f9\'e5\'e9 \'f1\'f2\'f0\'ee\'ea\'f3, \'ed\'e0 \'f1\'e0\'ec\'ee\'ec \'e4\'e5\'eb\'e5 \'f1\'ee\'e7\'e4\'e0\'e5\'f2 \'ed\'ee\'e2\'f3\'fe \'f1\'f2\'f0\'ee\'ea\'f3.\par
\b\'d1\'ee\'e7\'e4\'e0\'ed\'e8\'e5 \'f1\'f2\'f0\'ee\'ea\b0\par
string str1 = "Hello";\par
string str2 = "World!";\par
string str3 = string.Empty; // \'cf\'f3\'f1\'f2\'e0\'ff \'f1\'f2\'f0\'ee\'ea\'e0\par
string str4 = new string('A', 5); // \'f1\'f2\'f0\'ee\'ea\'e0 "AAAAA"\par
\b\'d0\'e0\'e1\'ee\'f2\'e0 \'f1\'ee \'f1\'f2\'f0\'ee\'ea\'e0\'ec\'e8\par
\b0\'ca\'eb\'e0\'f1\'f1 String \'e2 C# \'ef\'f0\'e5\'e4\'ee\'f1\'f2\'e0\'e2\'eb\'ff\'e5\'f2 \'ec\'ed\'ee\'e6\'e5\'f1\'f2\'e2\'ee \'f1\'f2\'e0\'f2\'e8\'f7\'e5\'f1\'ea\'e8\'f5 \'e8 \'fd\'ea\'e7\'e5\'ec\'ef\'eb\'ff\'f0\'ed\'fb\'f5 \'ec\'e5\'f2\'ee\'e4\'ee\'e2 \'e4\'eb\'ff \'f0\'e0\'e1\'ee\'f2\'fb \'f1\'ee \'f1\'f2\'f0\'ee\'ea\'e0\'ec\'e8. \'c2\'ee\'f2 \'ed\'e5\'ea\'ee\'f2\'ee\'f0\'fb\'e5 \'e8\'e7 \'ed\'e0\'e8\'e1\'ee\'eb\'e5\'e5 \'ef\'ee\'eb\'e5\'e7\'ed\'fb\'f5 \'ec\'e5\'f2\'ee\'e4\'ee\'e2:\par
\par
String.Concat(...): \'ca\'ee\'ed\'ea\'e0\'f2\'e5\'ed\'e8\'f0\'f3\'e5\'f2 \'f1\'f2\'f0\'ee\'ea\'e8.\par
String.Copy(string str): \'d1\'ee\'e7\'e4\'e0\'e5\'f2 \'ea\'ee\'ef\'e8\'fe \'f1\'f2\'f0\'ee\'ea\'e8.\par
String.Format(...): \'d4\'ee\'f0\'ec\'e0\'f2\'e8\'f0\'f3\'e5\'f2 \'f1\'f2\'f0\'ee\'ea\'f3 \'f1 \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'ed\'e8\'e5\'ec \'ef\'e0\'f0\'e0\'ec\'e5\'f2\'f0\'ee\'e2.\par
String.IsNullOrEmpty(string str): \'cf\'f0\'ee\'e2\'e5\'f0\'ff\'e5\'f2, \'ff\'e2\'eb\'ff\'e5\'f2\'f1\'ff \'eb\'e8 \'f1\'f2\'f0\'ee\'ea\'e0 null \'e8\'eb\'e8 \'ef\'f3\'f1\'f2\'ee\'e9.\par
String.IsNullOrWhiteSpace(string str): \'cf\'f0\'ee\'e2\'e5\'f0\'ff\'e5\'f2, \'ff\'e2\'eb\'ff\'e5\'f2\'f1\'ff \'eb\'e8 \'f1\'f2\'f0\'ee\'ea\'e0 null, \'ef\'f3\'f1\'f2\'ee\'e9 \'e8\'eb\'e8 \'f1\'ee\'f1\'f2\'ee\'e8\'f2 \'f2\'ee\'eb\'fc\'ea\'ee \'e8\'e7 \'ef\'f0\'ee\'e1\'e5\'eb\'fc\'ed\'fb\'f5 \'f1\'e8\'ec\'e2\'ee\'eb\'ee\'e2.\par
string.Compare(string str1, string str2): \'d1\'f0\'e0\'e2\'ed\'e8\'e2\'e0\'e5\'f2 \'e4\'e2\'e5 \'f1\'f2\'f0\'ee\'ea\'e8 \'eb\'e5\'ea\'f1\'e8\'ea\'ee\'e3\'f0\'e0\'f4\'e8\'f7\'e5\'f1\'ea\'e8 (\'e2\'ee\'e7\'e2\'f0\'e0\'f9\'e0\'e5\'f2 <0 \'e5\'f1\'eb\'e8 str1 \'ec\'e5\'ed\'fc\'f8\'e5 str2, >0 \'e5\'f1\'eb\'e8 str1 \'e1\'ee\'eb\'fc\'f8\'e5 str2 \'e8 0 \'e5\'f1\'eb\'e8 \'f0\'e0\'e2\'ed\'fb).\par
string.Equals(string str): \'cf\'f0\'ee\'e2\'e5\'f0\'ff\'e5\'f2, \'f0\'e0\'e2\'ed\'e0 \'eb\'e8 \'f1\'f2\'f0\'ee\'ea\'e0 \'e7\'e0\'e4\'e0\'ed\'ed\'ee\'e9 \'f1\'f2\'f0\'ee\'ea\'e5.\par
string.ToLower(): \'c2\'ee\'e7\'e2\'f0\'e0\'f9\'e0\'e5\'f2 \'ea\'ee\'ef\'e8\'fe \'f1\'f2\'f0\'ee\'ea\'e8 \'e2 \'ed\'e8\'e6\'ed\'e5\'ec \'f0\'e5\'e3\'e8\'f1\'f2\'f0\'e5.\par
string.ToUpper(): \'c2\'ee\'e7\'e2\'f0\'e0\'f9\'e0\'e5\'f2 \'ea\'ee\'ef\'e8\'fe \'f1\'f2\'f0\'ee\'ea\'e8 \'e2 \'e2\'e5\'f0\'f5\'ed\'e5\'ec \'f0\'e5\'e3\'e8\'f1\'f2\'f0\'e5.\par
string.Trim(): \'c2\'ee\'e7\'e2\'f0\'e0\'f9\'e0\'e5\'f2 \'ea\'ee\'ef\'e8\'fe \'f1\'f2\'f0\'ee\'ea\'e8 \'f1 \'f3\'e4\'e0\'eb\'e5\'ed\'ed\'fb\'ec\'e8 \'ed\'e0\'f7\'e0\'eb\'fc\'ed\'fb\'ec\'e8 \'e8 \'ea\'ee\'ed\'e5\'f7\'ed\'fb\'ec\'e8 \'ef\'f0\'ee\'e1\'e5\'eb\'fc\'ed\'fb\'ec\'e8 \'f1\'e8\'ec\'e2\'ee\'eb\'e0\'ec\'e8.\par
string.StartsWith(string prefix): \'cf\'f0\'ee\'e2\'e5\'f0\'ff\'e5\'f2, \'ed\'e0\'f7\'e8\'ed\'e0\'e5\'f2\'f1\'ff \'eb\'e8 \'f1\'f2\'f0\'ee\'ea\'e0 \'f1 \'e7\'e0\'e4\'e0\'ed\'ed\'ee\'e3\'ee \'ef\'f0\'e5\'f4\'e8\'ea\'f1\'e0.\par
string.EndsWith(string suffix): \'cf\'f0\'ee\'e2\'e5\'f0\'ff\'e5\'f2, \'e7\'e0\'ea\'e0\'ed\'f7\'e8\'e2\'e0\'e5\'f2\'f1\'ff \'eb\'e8 \'f1\'f2\'f0\'ee\'ea\'e0 \'e7\'e0\'e4\'e0\'ed\'ed\'fb\'ec \'f1\'f3\'f4\'f4\'e8\'ea\'f1\'ee\'ec.\par
string.Contains(string value): \'cf\'f0\'ee\'e2\'e5\'f0\'ff\'e5\'f2, \'f1\'ee\'e4\'e5\'f0\'e6\'e8\'f2 \'eb\'e8 \'f1\'f2\'f0\'ee\'ea\'e0 \'e7\'e0\'e4\'e0\'ed\'ed\'f3\'fe \'ef\'ee\'e4\'f1\'f2\'f0\'ee\'ea\'f3.\par
string.IndexOf(string value): \'c2\'ee\'e7\'e2\'f0\'e0\'f9\'e0\'e5\'f2 \'e8\'ed\'e4\'e5\'ea\'f1 \'ef\'e5\'f0\'e2\'ee\'e3\'ee \'e2\'f5\'ee\'e6\'e4\'e5\'ed\'e8\'ff \'e7\'e0\'e4\'e0\'ed\'ed\'ee\'e9 \'ef\'ee\'e4\'f1\'f2\'f0\'ee\'ea\'e8.\par
string.LastIndexOf(string value): \'c2\'ee\'e7\'e2\'f0\'e0\'f9\'e0\'e5\'f2 \'e8\'ed\'e4\'e5\'ea\'f1 \'ef\'ee\'f1\'eb\'e5\'e4\'ed\'e5\'e3\'ee \'e2\'f5\'ee\'e6\'e4\'e5\'ed\'e8\'ff \'e7\'e0\'e4\'e0\'ed\'ed\'ee\'e9 \'ef\'ee\'e4\'f1\'f2\'f0\'ee\'ea\'e8.\par
string.Substring(int startIndex): \'c2\'ee\'e7\'e2\'f0\'e0\'f9\'e0\'e5\'f2 \'ef\'ee\'e4\'f1\'f2\'f0\'ee\'ea\'f3, \'ed\'e0\'f7\'e8\'ed\'e0\'fe\'f9\'f3\'fe\'f1\'ff \'f1 \'f3\'ea\'e0\'e7\'e0\'ed\'ed\'ee\'e3\'ee \'e8\'ed\'e4\'e5\'ea\'f1\'e0.\par
string.Substring(int startIndex, int length): \'c2\'ee\'e7\'e2\'f0\'e0\'f9\'e0\'e5\'f2 \'ef\'ee\'e4\'f1\'f2\'f0\'ee\'ea\'f3, \'ed\'e0\'f7\'e8\'ed\'e0\'fe\'f9\'f3\'fe\'f1\'ff \'f1 \'f3\'ea\'e0\'e7\'e0\'ed\'ed\'ee\'e3\'ee \'e8\'ed\'e4\'e5\'ea\'f1\'e0 \'e8 \'e7\'e0\'e4\'e0\'ed\'ed\'ee\'e9 \'e4\'eb\'e8\'ed\'fb.\par
string.Replace(string oldValue, string newValue): \'c7\'e0\'ec\'e5\'ed\'ff\'e5\'f2 \'e2\'f1\'e5 \'e2\'f5\'ee\'e6\'e4\'e5\'ed\'e8\'ff \'ee\'e4\'ed\'ee\'e9 \'ef\'ee\'e4\'f1\'f2\'f0\'ee\'ea\'e8 \'ed\'e0 \'e4\'f0\'f3\'e3\'f3\'fe.\par
string.Insert(int startIndex, string value): \'c2\'f1\'f2\'e0\'e2\'eb\'ff\'e5\'f2 \'ef\'ee\'e4\'f1\'f2\'f0\'ee\'ea\'f3 \'e2 \'f3\'ea\'e0\'e7\'e0\'ed\'ed\'ee\'e5 \'ec\'e5\'f1\'f2\'ee.\par
string.Remove(int startIndex): \'d3\'e4\'e0\'eb\'ff\'e5\'f2 \'f1\'e8\'ec\'e2\'ee\'eb\'fb, \'ed\'e0\'f7\'e8\'ed\'e0\'ff \'f1 \'f3\'ea\'e0\'e7\'e0\'ed\'ed\'ee\'e3\'ee \'e8\'ed\'e4\'e5\'ea\'f1\'e0 \'e4\'ee \'ea\'ee\'ed\'f6\'e0 \'f1\'f2\'f0\'ee\'ea\'e8.\par
string.Remove(int startIndex, int count): \'d3\'e4\'e0\'eb\'ff\'e5\'f2 \'f3\'ea\'e0\'e7\'e0\'ed\'ed\'ee\'e5 \'ea\'ee\'eb\'e8\'f7\'e5\'f1\'f2\'e2\'ee \'f1\'e8\'ec\'e2\'ee\'eb\'ee\'e2, \'ed\'e0\'f7\'e8\'ed\'e0\'ff \'f1 \'e7\'e0\'e4\'e0\'ed\'ed\'ee\'e3\'ee \'e8\'ed\'e4\'e5\'ea\'f1\'e0.\par
string.Split(char separator): \'d0\'e0\'e7\'e1\'e8\'e2\'e0\'e5\'f2 \'f1\'f2\'f0\'ee\'ea\'f3 \'ed\'e0 \'ec\'e0\'f1\'f1\'e8\'e2 \'ef\'ee\'e4\'f1\'f2\'f0\'ee\'ea, \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'f3\'ff \'f3\'ea\'e0\'e7\'e0\'ed\'ed\'fb\'e9 \'f0\'e0\'e7\'e4\'e5\'eb\'e8\'f2\'e5\'eb\'fc.\par
string.Join(string separator, string[] values): \'d1\'ee\'e5\'e4\'e8\'ed\'ff\'e5\'f2 \'ec\'e0\'f1\'f1\'e8\'e2 \'f1\'f2\'f0\'ee\'ea \'e2 \'ee\'e4\'ed\'f3 \'f1\'f2\'f0\'ee\'ea\'f3 \'f1 \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'ed\'e8\'e5\'ec \'f3\'ea\'e0\'e7\'e0\'ed\'ed\'ee\'e3\'ee \'f0\'e0\'e7\'e4\'e5\'eb\'e8\'f2\'e5\'eb\'ff.\par
\f2\lang1033 ___\par
\b\f0\lang1049\'cd\'e0\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'e5 \'e2 C#\b0\par
\b\'cd\'e0\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'e5 \b0\f1\emdash  \f0\'fd\'f2\'ee \'ee\'e4\'e8\'ed \'e8\'e7 \'ea\'eb\'fe\'f7\'e5\'e2\'fb\'f5 \'ef\'f0\'e8\'ed\'f6\'e8\'ef\'ee\'e2 \'ee\'e1\'fa\'e5\'ea\'f2\'ed\'ee-\'ee\'f0\'e8\'e5\'ed\'f2\'e8\'f0\'ee\'e2\'e0\'ed\'ed\'ee\'e3\'ee \'ef\'f0\'ee\'e3\'f0\'e0\'ec\'ec\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'ff (\'ce\'ce\'cf), \'ea\'ee\'f2\'ee\'f0\'fb\'e9 \'ef\'ee\'e7\'e2\'ee\'eb\'ff\'e5\'f2 \'f1\'ee\'e7\'e4\'e0\'e2\'e0\'f2\'fc \'ed\'ee\'e2\'fb\'e5 \'ea\'eb\'e0\'f1\'f1\'fb \'ed\'e0 \'ee\'f1\'ed\'ee\'e2\'e5 \'f1\'f3\'f9\'e5\'f1\'f2\'e2\'f3\'fe\'f9\'e8\'f5. \'cd\'ee\'e2\'fb\'e9 \'ea\'eb\'e0\'f1\'f1, \'ed\'e0\'e7\'fb\'e2\'e0\'e5\'ec\'fb\'e9 \'ef\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'ec \'e8\'eb\'e8 \'ef\'ee\'e4\'ea\'eb\'e0\'f1\'f1\'ee\'ec, \'ed\'e0\'f1\'eb\'e5\'e4\'f3\'e5\'f2 \'f1\'e2\'ee\'e9\'f1\'f2\'e2\'e0 \'e8 \'ec\'e5\'f2\'ee\'e4\'fb \'f1\'f3\'f9\'e5\'f1\'f2\'e2\'f3\'fe\'f9\'e5\'e3\'ee \'ea\'eb\'e0\'f1\'f1\'e0, \'ed\'e0\'e7\'fb\'e2\'e0\'e5\'ec\'ee\'e3\'ee \'e1\'e0\'e7\'ee\'e2\'fb\'ec \'e8\'eb\'e8 \'f0\'ee\'e4\'e8\'f2\'e5\'eb\'fc\'f1\'ea\'e8\'ec \'ea\'eb\'e0\'f1\'f1\'ee\'ec.\par
\b\'c1\'e0\'e7\'ee\'e2\'fb\'e5 \'ef\'ee\'ed\'ff\'f2\'e8\'ff\b0\par
\'c1\'e0\'e7\'ee\'e2\'fb\'e9 \'ea\'eb\'e0\'f1\'f1 (\'f0\'ee\'e4\'e8\'f2\'e5\'eb\'fc\'f1\'ea\'e8\'e9 \'ea\'eb\'e0\'f1\'f1): \'ca\'eb\'e0\'f1\'f1, \'ee\'f2 \'ea\'ee\'f2\'ee\'f0\'ee\'e3\'ee \'ed\'e0\'f1\'eb\'e5\'e4\'f3\'fe\'f2\'f1\'ff \'f1\'e2\'ee\'e9\'f1\'f2\'e2\'e0 \'e8 \'ec\'e5\'f2\'ee\'e4\'fb.\par
\'cf\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'e9 \'ea\'eb\'e0\'f1\'f1 (\'ef\'ee\'e4\'ea\'eb\'e0\'f1\'f1): \'ca\'eb\'e0\'f1\'f1, \'ea\'ee\'f2\'ee\'f0\'fb\'e9 \'ed\'e0\'f1\'eb\'e5\'e4\'f3\'e5\'f2 \'f1\'e2\'ee\'e9\'f1\'f2\'e2\'e0 \'e8 \'ec\'e5\'f2\'ee\'e4\'fb \'e1\'e0\'e7\'ee\'e2\'ee\'e3\'ee \'ea\'eb\'e0\'f1\'f1\'e0.\par
\'ca\'eb\'fe\'f7\'e5\'e2\'ee\'e5 \'f1\'eb\'ee\'e2\'ee base: \'c8\'f1\'ef\'ee\'eb\'fc\'e7\'f3\'e5\'f2\'f1\'ff \'e4\'eb\'ff \'ee\'e1\'f0\'e0\'f9\'e5\'ed\'e8\'ff \'ea \'f7\'eb\'e5\'ed\'e0\'ec \'e1\'e0\'e7\'ee\'e2\'ee\'e3\'ee \'ea\'eb\'e0\'f1\'f1\'e0 \'e8\'e7 \'ef\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'ee\'e3\'ee \'ea\'eb\'e0\'f1\'f1\'e0.\par
\b\'cf\'f0\'e5\'e8\'ec\'f3\'f9\'e5\'f1\'f2\'e2\'e0 \'ed\'e0\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'ff\b0\par
\'cf\'ee\'e2\'f2\'ee\'f0\'ed\'ee\'e5 \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'ed\'e8\'e5 \'ea\'ee\'e4\'e0: \'cf\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'e9 \'ea\'eb\'e0\'f1\'f1 \'ec\'ee\'e6\'e5\'f2 \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'f2\'fc \'ea\'ee\'e4 \'e1\'e0\'e7\'ee\'e2\'ee\'e3\'ee \'ea\'eb\'e0\'f1\'f1\'e0, \'f7\'f2\'ee \'f3\'ec\'e5\'ed\'fc\'f8\'e0\'e5\'f2 \'e4\'f3\'e1\'eb\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'e5 \'ea\'ee\'e4\'e0.\par
\'d0\'e0\'f1\'f8\'e8\'f0\'ff\'e5\'ec\'ee\'f1\'f2\'fc: \'cb\'e5\'e3\'ea\'ee \'e4\'ee\'e1\'e0\'e2\'eb\'ff\'f2\'fc \'ed\'ee\'e2\'fb\'e5 \'f4\'f3\'ed\'ea\'f6\'e8\'ee\'ed\'e0\'eb\'fc\'ed\'ee\'f1\'f2\'e8, \'f0\'e0\'f1\'f8\'e8\'f0\'ff\'ff \'f1\'f3\'f9\'e5\'f1\'f2\'e2\'f3\'fe\'f9\'e8\'e5 \'ea\'eb\'e0\'f1\'f1\'fb.\par
\'d3\'ef\'f0\'ee\'f9\'e5\'ed\'e8\'e5 \'ef\'ee\'e4\'e4\'e5\'f0\'e6\'ea\'e8: \'c8\'e7\'ec\'e5\'ed\'e5\'ed\'e8\'ff \'e2 \'e1\'e0\'e7\'ee\'e2\'ee\'ec \'ea\'eb\'e0\'f1\'f1\'e5 \'e0\'e2\'f2\'ee\'ec\'e0\'f2\'e8\'f7\'e5\'f1\'ea\'e8 \'ef\'f0\'e8\'ec\'e5\'ed\'ff\'fe\'f2\'f1\'ff \'ea\'ee \'e2\'f1\'e5\'ec \'ef\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'ec \'ea\'eb\'e0\'f1\'f1\'e0\'ec.\par
\b\'cd\'e5\'e4\'ee\'f1\'f2\'e0\'f2\'ea\'e8 \'ed\'e0\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'ff\b0\par
\'d1\'eb\'e0\'e1\'e0\'ff \'f1\'e2\'ff\'e7\'fc: \'cf\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'e9 \'ea\'eb\'e0\'f1\'f1 \'f2\'e5\'f1\'ed\'ee \'f1\'e2\'ff\'e7\'e0\'ed \'f1 \'e1\'e0\'e7\'ee\'e2\'fb\'ec \'ea\'eb\'e0\'f1\'f1\'ee\'ec, \'f7\'f2\'ee \'ec\'ee\'e6\'e5\'f2 \'f3\'f1\'eb\'ee\'e6\'ed\'e8\'f2\'fc \'e8\'e7\'ec\'e5\'ed\'e5\'ed\'e8\'e5 \'e1\'e0\'e7\'ee\'e2\'ee\'e3\'ee \'ea\'eb\'e0\'f1\'f1\'e0.\par
\'cf\'f0\'ee\'e1\'eb\'e5\'ec\'fb \'f1 \'ec\'ed\'ee\'e6\'e5\'f1\'f2\'e2\'e5\'ed\'ed\'fb\'ec \'ed\'e0\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'e5\'ec: \'c2 C# \'ed\'e5 \'ef\'ee\'e4\'e4\'e5\'f0\'e6\'e8\'e2\'e0\'e5\'f2\'f1\'ff \'ec\'ed\'ee\'e6\'e5\'f1\'f2\'e2\'e5\'ed\'ed\'ee\'e5 \'ed\'e0\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'e5 \'ea\'eb\'e0\'f1\'f1\'ee\'e2, \'f7\'f2\'ee \'ec\'ee\'e6\'e5\'f2 \'ee\'e3\'f0\'e0\'ed\'e8\'f7\'e8\'e2\'e0\'f2\'fc \'e3\'e8\'e1\'ea\'ee\'f1\'f2\'fc.\par
\'cf\'ee\'f2\'e5\'ed\'f6\'e8\'e0\'eb\'fc\'ed\'fb\'e5 \'ef\'f0\'ee\'e1\'eb\'e5\'ec\'fb \'f1 \'e1\'e5\'e7\'ee\'ef\'e0\'f1\'ed\'ee\'f1\'f2\'fc\'fe: \'cf\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'fb\'e9 \'ea\'eb\'e0\'f1\'f1 \'ec\'ee\'e6\'e5\'f2 \'ef\'ee\'eb\'f3\'f7\'e8\'f2\'fc \'e4\'ee\'f1\'f2\'f3\'ef \'ea \'e7\'e0\'f9\'e8\'f9\'e5\'ed\'ed\'fb\'ec \'f7\'eb\'e5\'ed\'e0\'ec \'e1\'e0\'e7\'ee\'e2\'ee\'e3\'ee \'ea\'eb\'e0\'f1\'f1\'e0, \'f7\'f2\'ee \'ec\'ee\'e6\'e5\'f2 \'ef\'f0\'e8\'e2\'e5\'f1\'f2\'e8 \'ea \'ed\'e5\'ef\'f0\'e5\'e4\'e2\'e8\'e4\'e5\'ed\'ed\'fb\'ec \'ef\'ee\'f1\'eb\'e5\'e4\'f1\'f2\'e2\'e8\'ff\'ec.\b\par
\'ce\'e1\'f9\'e0\'ff \'f4\'ee\'f0\'ec\'e0 \'ed\'e0\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'ff\par
\'cf\'f0\'e8\'ec\'e5\'f0 \'e1\'e0\'e7\'ee\'e2\'ee\'e3\'ee \'ea\'eb\'e0\'f1\'f1\'e0:\b0\par
public class Animal\par
\{\par
    public string Name \{ get; set; \}\par
    public void Eat()\par
    \{\par
        Console.WriteLine("Eating...");\par
    \}\par
    public virtual void MakeSound()\par
    \{\par
        Console.WriteLine("Animal sound");\par
    \}\par
\}\par
\b\'cf\'f0\'e8\'ec\'e5\'f0 \'ef\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'ee\'e3\'ee \'ea\'eb\'e0\'f1\'f1\'e0:\b0\par
public class Dog : Animal\par
\{\par
    public void Bark()\par
    \{\par
        Console.WriteLine("Bark");\par
    \}\par
    public override void MakeSound()\par
    \{\par
        Console.WriteLine("Bark");\par
    \}\par
\}\par
\b\'c8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'ed\'e8\'e5 \'ef\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'ed\'ee\'e3\'ee \'ea\'eb\'e0\'f1\'f1\'e0:\b0\par
class Program\par
\{\par
    static void Main()\par
    \{\par
        Dog myDog = new Dog();\par
        myDog.Name = "Buddy";\par
        myDog.Eat(); // Output: Eating...\par
        myDog.Bark(); // Output: Bark\par
        myDog.MakeSound(); // Output: Bark\par
    \}\par
\par
\b\'d1\'f2\'f0\'ee\'ea\'e8 \'e2 C#\b0\par
\'d1\'f2\'f0\'ee\'ea\'e8 \'e2 C# \'ef\'f0\'e5\'e4\'f1\'f2\'e0\'e2\'eb\'ff\'fe\'f2 \'f1\'ee\'e1\'ee\'e9 \'ef\'ee\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'f2\'e5\'eb\'fc\'ed\'ee\'f1\'f2\'e8 \'f1\'e8\'ec\'e2\'ee\'eb\'ee\'e2 \'e8 \'ff\'e2\'eb\'ff\'fe\'f2\'f1\'ff \'ed\'e5\'e8\'e7\'ec\'e5\'ed\'ff\'e5\'ec\'fb\'ec\'e8 \'ee\'e1\'fa\'e5\'ea\'f2\'e0\'ec\'e8. \'dd\'f2\'ee \'ee\'e7\'ed\'e0\'f7\'e0\'e5\'f2, \'f7\'f2\'ee \'ef\'ee\'f1\'eb\'e5 \'f1\'ee\'e7\'e4\'e0\'ed\'e8\'ff \'f1\'f2\'f0\'ee\'ea\'e8 \'e5\'e5 \'f1\'ee\'e4\'e5\'f0\'e6\'e8\'ec\'ee\'e5 \'ed\'e5 \'ec\'ee\'e6\'e5\'f2 \'e1\'fb\'f2\'fc \'e8\'e7\'ec\'e5\'ed\'e5\'ed\'ee. \'c2\'ec\'e5\'f1\'f2\'ee \'fd\'f2\'ee\'e3\'ee \'f1\'ee\'e7\'e4\'e0\'e5\'f2\'f1\'ff \'ed\'ee\'e2\'e0\'ff \'f1\'f2\'f0\'ee\'ea\'e0 \'f1 \'e8\'e7\'ec\'e5\'ed\'e5\'ed\'ed\'fb\'ec \'f1\'ee\'e4\'e5\'f0\'e6\'e8\'ec\'fb\'ec.\par
\b\'ce\'e1\'fa\'ff\'e2\'eb\'e5\'ed\'e8\'e5 \'e8 \'e8\'ed\'e8\'f6\'e8\'e0\'eb\'e8\'e7\'e0\'f6\'e8\'ff \'f1\'f2\'f0\'ee\'ea\b0\par
\'d1\'f2\'f0\'ee\'ea\'e8 \'ec\'ee\'e6\'ed\'ee \'ee\'e1\'fa\'ff\'e2\'eb\'ff\'f2\'fc \'e8 \'e8\'ed\'e8\'f6\'e8\'e0\'eb\'e8\'e7\'e8\'f0\'ee\'e2\'e0\'f2\'fc \'f0\'e0\'e7\'eb\'e8\'f7\'ed\'fb\'ec\'e8 \'f1\'ef\'ee\'f1\'ee\'e1\'e0\'ec\'e8:\par
\b\'cf\'f0\'e8\'ec\'e5\'f0:\b0\par
string str1 = "Hello, World!";\par
string str2 = new string('a', 5); // \'d1\'ee\'e7\'e4\'e0\'e5\'f2 \'f1\'f2\'f0\'ee\'ea\'f3 "aaaaa"\par
string str3 = string.Empty; // \'cf\'f3\'f1\'f2\'e0\'ff \'f1\'f2\'f0\'ee\'ea\'e0\par
\b\'c4\'ee\'f1\'f2\'f3\'ef \'ea \'fd\'eb\'e5\'ec\'e5\'ed\'f2\'e0\'ec \'f1\'f2\'f0\'ee\'ea\'e8\par
\'dd\'eb\'e5\'ec\'e5\'ed\'f2\'fb \'f1\'f2\'f0\'ee\'ea\'e8 \'e4\'ee\'f1\'f2\'f3\'ef\'ed\'fb \'ef\'ee \'e8\'ed\'e4\'e5\'ea\'f1\'f3, \'ed\'e0\'f7\'e8\'ed\'e0\'ff \'f1 0.\par
\'cf\'f0\'e8\'ec\'e5\'f0:\b0\par
string str = "Hello";\par
char firstChar = str[0]; // 'H'\par
char secondChar = str[1]; // 'e'\par
\b\'ce\'f1\'ed\'ee\'e2\'ed\'fb\'e5 \'ec\'e5\'f2\'ee\'e4\'fb \'ea\'eb\'e0\'f1\'f1\'e0 String\b0\par
\b Length: \'c2\'ee\'e7\'e2\'f0\'e0\'f9\'e0\'e5\'f2 \'e4\'eb\'e8\'ed\'f3 \'f1\'f2\'f0\'ee\'ea\'e8.\b0\par
string str = "Hello";\par
int length = str.Length; // 5\par
\b Substring: \'c2\'ee\'e7\'e2\'f0\'e0\'f9\'e0\'e5\'f2 \'ef\'ee\'e4\'f1\'f2\'f0\'ee\'ea\'f3, \'ed\'e0\'f7\'e8\'ed\'e0\'ff \'f1 \'f3\'ea\'e0\'e7\'e0\'ed\'ed\'ee\'e3\'ee \'e8\'ed\'e4\'e5\'ea\'f1\'e0.\b0\par
string str = "Hello, World!";\par
string subStr = str.Substring(7, 5); // "World"\par
\b IndexOf: \'c2\'ee\'e7\'e2\'f0\'e0\'f9\'e0\'e5\'f2 \'e8\'ed\'e4\'e5\'ea\'f1 \'ef\'e5\'f0\'e2\'ee\'e3\'ee \'e2\'f5\'ee\'e6\'e4\'e5\'ed\'e8\'ff \'f3\'ea\'e0\'e7\'e0\'ed\'ed\'ee\'e3\'ee \'f1\'e8\'ec\'e2\'ee\'eb\'e0 \'e8\'eb\'e8 \'ef\'ee\'e4\'f1\'f2\'f0\'ee\'ea\'e8.\b0\par
string str = "Hello, World!";\par
int index = str.IndexOf('W'); // 7\par
\b Replace: \'c7\'e0\'ec\'e5\'ed\'ff\'e5\'f2 \'e2\'f1\'e5 \'e2\'f5\'ee\'e6\'e4\'e5\'ed\'e8\'ff \'f3\'ea\'e0\'e7\'e0\'ed\'ed\'ee\'e3\'ee \'f1\'e8\'ec\'e2\'ee\'eb\'e0 \'e8\'eb\'e8 \'ef\'ee\'e4\'f1\'f2\'f0\'ee\'ea\'e8 \'ed\'e0 \'e4\'f0\'f3\'e3\'f3\'fe \'ef\'ee\'e4\'f1\'f2\'f0\'ee\'ea\'f3.\b0\par
string str = "Hello, World!";\par
string newStr = str.Replace("World", "C#"); // "Hello, C#!"\par
\b ToUpper \'e8 ToLower: \'cf\'f0\'e5\'ee\'e1\'f0\'e0\'e7\'f3\'fe\'f2 \'f1\'f2\'f0\'ee\'ea\'f3 \'e2 \'e2\'e5\'f0\'f5\'ed\'e8\'e9 \'e8\'eb\'e8 \'ed\'e8\'e6\'ed\'e8\'e9 \'f0\'e5\'e3\'e8\'f1\'f2\'f0.\b0\par
string str = "Hello, World!";\par
string upperStr = str.ToUpper(); // "HELLO, WORLD!"\par
string lowerStr = str.ToLower(); // "hello, world!"\par
\b Trim: \'d3\'e4\'e0\'eb\'ff\'e5\'f2 \'e2\'f1\'e5 \'ed\'e0\'f7\'e0\'eb\'fc\'ed\'fb\'e5 \'e8 \'ea\'ee\'ed\'e5\'f7\'ed\'fb\'e5 \'ef\'f0\'ee\'e1\'e5\'eb\'fb \'e8\'e7 \'f1\'f2\'f0\'ee\'ea\'e8.\b0\par
string str = "   Hello, World!   ";\par
string trimmedStr = str.Trim(); // "Hello, World!"\par
\b Split: \'d0\'e0\'e7\'e4\'e5\'eb\'ff\'e5\'f2 \'f1\'f2\'f0\'ee\'ea\'f3 \'ed\'e0 \'ec\'e0\'f1\'f1\'e8\'e2 \'ef\'ee\'e4\'f1\'f2\'f0\'ee\'ea \'ed\'e0 \'ee\'f1\'ed\'ee\'e2\'e5 \'f3\'ea\'e0\'e7\'e0\'ed\'ed\'ee\'e3\'ee \'f0\'e0\'e7\'e4\'e5\'eb\'e8\'f2\'e5\'eb\'ff.\b0\par
string str = "apple,banana,cherry";\par
string[] fruits = str.Split(','); // ["apple", "banana", "cherry"]\par
\b Join: \'ce\'e1\'fa\'e5\'e4\'e8\'ed\'ff\'e5\'f2 \'fd\'eb\'e5\'ec\'e5\'ed\'f2\'fb \'ec\'e0\'f1\'f1\'e8\'e2\'e0 \'f1\'f2\'f0\'ee\'ea \'e2 \'ee\'e4\'ed\'f3 \'f1\'f2\'f0\'ee\'ea\'f3 \'f1 \'f3\'ea\'e0\'e7\'e0\'ed\'ed\'fb\'ec \'f0\'e0\'e7\'e4\'e5\'eb\'e8\'f2\'e5\'eb\'e5\'ec.\par
\b0 string[] fruits = \{ "apple", "banana", "cherry" \};\par
string str = string.Join(", ", fruits); // "apple, banana, cherry"\b\i\f2\lang9\par
}
 